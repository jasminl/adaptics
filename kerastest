{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMefFACGJYogNcwKcGsD82B",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/jasminl/adaptics/blob/master/kerastest\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "cuwCw0nKCq-K"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install keras"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "i-VDNz_fCrsb",
        "outputId": "4c5cdff1-80ce-485b-9090-f7ca6f48e754"
      },
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: keras in /usr/local/lib/python3.10/dist-packages (2.15.0)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import keras\n",
        "import numpy as np\n",
        "\n",
        "# Clear all previously registered custom objects\n",
        "keras.saving.get_custom_objects().clear()\n",
        "\n",
        "\n",
        "# Upon registration, you can optionally specify a package or a name.\n",
        "# If left blank, the package defaults to `Custom` and the name defaults to\n",
        "# the class name.\n",
        "@keras.saving.register_keras_serializable(package=\"MyLayers\")\n",
        "class CustomLayer(keras.layers.Layer):\n",
        "    def __init__(self, factor):\n",
        "        super().__init__()\n",
        "        self.factor = factor\n",
        "\n",
        "    def call(self, x):\n",
        "        return x * self.factor\n",
        "\n",
        "    def get_config(self):\n",
        "        return {\"factor\": self.factor}\n",
        "\n",
        "\n",
        "@keras.saving.register_keras_serializable(package=\"my_package\", name=\"custom_fn\")\n",
        "def custom_fn(x):\n",
        "    return x**2\n",
        "\n",
        "\n",
        "# Create the model.\n",
        "def get_model():\n",
        "    inputs = keras.Input(shape=(4,))\n",
        "    mid = CustomLayer(0.5)(inputs)\n",
        "    outputs = keras.layers.Dense(1, activation=custom_fn)(mid)\n",
        "    model = keras.Model(inputs, outputs)\n",
        "    model.compile(optimizer=\"rmsprop\", loss=\"mean_squared_error\")\n",
        "    return model\n",
        "\n",
        "\n",
        "# Train the model.\n",
        "def train_model(model):\n",
        "    input = np.random.random((4, 4))\n",
        "    target = np.random.random((4, 1))\n",
        "    model.fit(input, target)\n",
        "    return model\n",
        "\n",
        "\n",
        "test_input = np.random.random((4, 4))\n",
        "test_target = np.random.random((4, 1))\n",
        "\n",
        "model = get_model()\n",
        "model = train_model(model)\n",
        "model.save(\"custom_model.keras\")\n",
        "\n",
        "# Now, we can simply load without worrying about our custom objects.\n",
        "reconstructed_model = keras.models.load_model(\"custom_model.keras\")\n",
        "\n",
        "# Let's check:\n",
        "np.testing.assert_allclose(\n",
        "    model.predict(test_input), reconstructed_model.predict(test_input)\n",
        ")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "OnujXml8C07S",
        "outputId": "95e1cd63-966f-4a6d-91d0-087a72bd6c9d"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1/1 [==============================] - 1s 529ms/step - loss: 0.3102\n",
            "1/1 [==============================] - 0s 122ms/step\n",
            "1/1 [==============================] - 0s 109ms/step\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "# Now, we can simply load without worrying about our custom objects.\n",
        "reconstructed_model = keras.models.load_model(\"custom_model.keras\")\n",
        "\n",
        "test_input = np.random.random((4, 4))\n",
        "\n",
        "# Let's check:\n",
        "np.testing.assert_allclose(\n",
        "    model.predict(test_input), reconstructed_model.predict(test_input)\n",
        ")"
      ],
      "metadata": {
        "id": "ovWhyqunDHkx"
      },
      "execution_count": 3,
      "outputs": []
    }
  ]
}